// <auto-generated />
using System;
using DentalManagerAPI.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DentalManagerAPI.Migrations
{
    [DbContext(typeof(DentalManagerDBContext))]
    [Migration("20220602173347_appointment_allow_notesnull")]
    partial class appointment_allow_notesnull
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Ukrainian_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DentalManagerAPI.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("AppointmentTime")
                        .HasColumnType("time");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("RealEndTime")
                        .HasColumnType("time");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("StatusId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateTime(2000, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentTime = new TimeSpan(0, 19, 10, 0, 0),
                            Notes = "Lorem",
                            PatientId = 1,
                            RealEndTime = new TimeSpan(0, 20, 0, 0, 0),
                            StatusId = 1,
                            TotalSum = 500m,
                            WorkerId = 1
                        });
                });

            modelBuilder.Entity("DentalManagerAPI.Models.AppointmentPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransactionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("AppointmentPayments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            Total = 500m,
                            TransactionNumber = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 1,
                            Total = 500m,
                            TransactionNumber = 2
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 1,
                            Total = 500m,
                            TransactionNumber = 3
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 1,
                            Total = 500m,
                            TransactionNumber = 4
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 1,
                            Total = 500m,
                            TransactionNumber = 5
                        });
                });

            modelBuilder.Entity("DentalManagerAPI.Models.AppointmentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentServices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 5,
                            AppointmentId = 1,
                            ServiceId = 1
                        });
                });

            modelBuilder.Entity("DentalManagerAPI.Models.AppointmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Новий"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Завершений"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Оплачений"
                        });
                });

            modelBuilder.Entity("DentalManagerAPI.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Славута"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Львів"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Київ"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Івано-Франківськ"
                        });
                });

            modelBuilder.Entity("DentalManagerAPI.Models.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Days");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Понеділок"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Вівторок"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Середа"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Четвер"
                        },
                        new
                        {
                            Id = 5,
                            Name = "П'ятниця"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Субота"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Неділя"
                        });
                });

            modelBuilder.Entity("DentalManagerAPI.Models.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Offices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Б.Хмельницого 45",
                            CityId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "C.Бандери 11а",
                            CityId = 2
                        },
                        new
                        {
                            Id = 3,
                            Address = "Б.Хмельницого 155",
                            CityId = 3
                        },
                        new
                        {
                            Id = 4,
                            Address = "І.Франка 123",
                            CityId = 4
                        },
                        new
                        {
                            Id = 5,
                            Address = "Стрийська 198а",
                            CityId = 2
                        });
                });

            modelBuilder.Entity("DentalManagerAPI.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patient", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "test",
                            DateOfBirth = new DateTime(2000, 10, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ivan",
                            LastName = "Raikovskyi",
                            PhoneNumber = "+380673646192"
                        },
                        new
                        {
                            Id = 2,
                            Address = "test2",
                            DateOfBirth = new DateTime(2001, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mykola",
                            LastName = "Harch",
                            PhoneNumber = "+380973656192"
                        },
                        new
                        {
                            Id = 3,
                            Address = "test2",
                            DateOfBirth = new DateTime(2001, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mykola",
                            LastName = "Harch",
                            PhoneNumber = "+380973656192"
                        },
                        new
                        {
                            Id = 4,
                            Address = "test2",
                            DateOfBirth = new DateTime(2001, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mykola",
                            LastName = "Harch",
                            PhoneNumber = "+380973656192"
                        },
                        new
                        {
                            Id = 5,
                            Address = "test2",
                            DateOfBirth = new DateTime(2001, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mykola",
                            LastName = "Harch",
                            PhoneNumber = "+380973656192"
                        },
                        new
                        {
                            Id = 6,
                            Address = "test2",
                            DateOfBirth = new DateTime(2001, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mykola",
                            LastName = "Harch",
                            PhoneNumber = "+380973656192"
                        },
                        new
                        {
                            Id = 7,
                            Address = "test2",
                            DateOfBirth = new DateTime(2001, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mykola",
                            LastName = "Harch",
                            PhoneNumber = "+380973656192"
                        },
                        new
                        {
                            Id = 8,
                            Address = "test2",
                            DateOfBirth = new DateTime(2001, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mykola",
                            LastName = "Harch",
                            PhoneNumber = "+380973656192"
                        },
                        new
                        {
                            Id = 9,
                            Address = "test2",
                            DateOfBirth = new DateTime(2001, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mykola",
                            LastName = "Harch",
                            PhoneNumber = "+380973656192"
                        },
                        new
                        {
                            Id = 10,
                            Address = "test2",
                            DateOfBirth = new DateTime(2001, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mykola",
                            LastName = "Harch",
                            PhoneNumber = "+380973656192"
                        },
                        new
                        {
                            Id = 11,
                            Address = "test2",
                            DateOfBirth = new DateTime(2001, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mykola",
                            LastName = "Harch",
                            PhoneNumber = "+380973656192"
                        },
                        new
                        {
                            Id = 12,
                            Address = "test2",
                            DateOfBirth = new DateTime(2001, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mykola",
                            LastName = "Harch",
                            PhoneNumber = "+380973656192"
                        },
                        new
                        {
                            Id = 13,
                            Address = "test2",
                            DateOfBirth = new DateTime(2001, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mykola",
                            LastName = "Harch",
                            PhoneNumber = "+380973656192"
                        },
                        new
                        {
                            Id = 14,
                            Address = "test2",
                            DateOfBirth = new DateTime(2001, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mykola",
                            LastName = "Harch",
                            PhoneNumber = "+380973656192"
                        },
                        new
                        {
                            Id = 15,
                            Address = "test2",
                            DateOfBirth = new DateTime(2001, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mykola",
                            LastName = "Harch",
                            PhoneNumber = "+380973656192"
                        },
                        new
                        {
                            Id = 16,
                            Address = "test2",
                            DateOfBirth = new DateTime(2001, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mykola",
                            LastName = "Harch",
                            PhoneNumber = "+380973656192"
                        },
                        new
                        {
                            Id = 17,
                            Address = "test2",
                            DateOfBirth = new DateTime(2001, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mykola",
                            LastName = "Harch",
                            PhoneNumber = "+380973656192"
                        },
                        new
                        {
                            Id = 18,
                            Address = "test2",
                            DateOfBirth = new DateTime(2001, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mykola",
                            LastName = "Harch",
                            PhoneNumber = "+380973656192"
                        },
                        new
                        {
                            Id = 19,
                            Address = "test2",
                            DateOfBirth = new DateTime(2001, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mykola",
                            LastName = "Harch",
                            PhoneNumber = "+380973656192"
                        },
                        new
                        {
                            Id = 20,
                            Address = "test2",
                            DateOfBirth = new DateTime(2001, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mykola",
                            LastName = "Harch",
                            PhoneNumber = "+380973656192"
                        },
                        new
                        {
                            Id = 21,
                            Address = "test3",
                            DateOfBirth = new DateTime(2002, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Maksym",
                            LastName = "Boiko",
                            PhoneNumber = "+380963386182"
                        });
                });

            modelBuilder.Entity("DentalManagerAPI.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AppointmentPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BaseRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentPercentage = 75m,
                            BaseRate = 0m,
                            PositionName = "Парадонтолог"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentPercentage = 1m,
                            BaseRate = 10000m,
                            PositionName = "Менеджер"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentPercentage = 0m,
                            BaseRate = 5000m,
                            PositionName = "Прибиральниця"
                        });
                });

            modelBuilder.Entity("DentalManagerAPI.Models.SalaryPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("MonthNumber")
                        .HasColumnType("smallint");

                    b.Property<int>("TransactionNumber")
                        .HasColumnType("int");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId");

                    b.ToTable("SalaryPayments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1000m,
                            MonthNumber = (short)1,
                            TransactionNumber = 1,
                            WorkerId = 1,
                            Year = (short)2000
                        },
                        new
                        {
                            Id = 2,
                            Amount = 1001m,
                            MonthNumber = (short)5,
                            TransactionNumber = 2,
                            WorkerId = 1,
                            Year = (short)2021
                        },
                        new
                        {
                            Id = 3,
                            Amount = 1002m,
                            MonthNumber = (short)8,
                            TransactionNumber = 3,
                            WorkerId = 1,
                            Year = (short)2012
                        },
                        new
                        {
                            Id = 4,
                            Amount = 1003m,
                            MonthNumber = (short)9,
                            TransactionNumber = 4,
                            WorkerId = 1,
                            Year = (short)2021
                        },
                        new
                        {
                            Id = 5,
                            Amount = 1004m,
                            MonthNumber = (short)12,
                            TransactionNumber = 5,
                            WorkerId = 1,
                            Year = (short)2021
                        });
                });

            modelBuilder.Entity("DentalManagerAPI.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DayId")
                        .HasColumnType("int");

                    b.Property<int>("TimeSegmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("TimeSegmentId");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayId = 1,
                            TimeSegmentId = 1
                        },
                        new
                        {
                            Id = 2,
                            DayId = 2,
                            TimeSegmentId = 2
                        },
                        new
                        {
                            Id = 3,
                            DayId = 3,
                            TimeSegmentId = 3
                        },
                        new
                        {
                            Id = 4,
                            DayId = 4,
                            TimeSegmentId = 3
                        },
                        new
                        {
                            Id = 5,
                            DayId = 5,
                            TimeSegmentId = 5
                        });
                });

            modelBuilder.Entity("DentalManagerAPI.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dolor sit amet",
                            Name = "Консультація лікаря – стоматолога",
                            Price = 100m,
                            ServiceTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Lorem",
                            Name = "Консультація кандидата медичних наук, доцента",
                            Price = 200m,
                            ServiceTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Ipsum",
                            Name = "Консультація лікаря-імплантолога, ортопеда, ортодонта, пародонтолога",
                            Price = 300m,
                            ServiceTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "El lingua",
                            Name = "Повторний видрук ортопантомограми",
                            Price = 400m,
                            ServiceTypeId = 5
                        },
                        new
                        {
                            Id = 5,
                            Description = "Moloc boloc",
                            Name = "Комп’ютерна томографія 1 щелепи",
                            Price = 500m,
                            ServiceTypeId = 5
                        });
                });

            modelBuilder.Entity("DentalManagerAPI.Models.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Консультація"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Діагностика"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Анестезія"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Терапевтична та ендодонтична стоматологія"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Дитяча стоматологія"
                        });
                });

            modelBuilder.Entity("DentalManagerAPI.Models.TimeSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<TimeSpan>("TimeEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TimeStart")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("TimeSegments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TimeEnd = new TimeSpan(0, 18, 0, 0, 0),
                            TimeStart = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            TimeEnd = new TimeSpan(0, 20, 0, 0, 0),
                            TimeStart = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            TimeEnd = new TimeSpan(0, 22, 0, 0, 0),
                            TimeStart = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            TimeEnd = new TimeSpan(0, 22, 0, 0, 0),
                            TimeStart = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            TimeEnd = new TimeSpan(0, 16, 0, 0, 0),
                            TimeStart = new TimeSpan(0, 8, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("DentalManagerAPI.Models.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OfficeId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PositionId");

                    b.ToTable("Workers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "testadd",
                            Email = "test@gmail.com",
                            FirstName = "Ivan",
                            LastName = "Raikovskyi",
                            OfficeId = 1,
                            Password = "a98ec5c5044800c88e862f007b98d89815fc40ca155d6ce7909530d792e909ce",
                            PhoneNumber = "+384613646192",
                            PositionId = 1
                        });
                });

            modelBuilder.Entity("DentalManagerAPI.Models.WorkerSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("WorkerId");

                    b.ToTable("WorkerSchedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ScheduleId = 1,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 2,
                            ScheduleId = 2,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 3,
                            ScheduleId = 3,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 4,
                            ScheduleId = 4,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 5,
                            ScheduleId = 5,
                            WorkerId = 1
                        });
                });

            modelBuilder.Entity("DentalManagerAPI.Models.Appointment", b =>
                {
                    b.HasOne("DentalManagerAPI.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalManagerAPI.Models.AppointmentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalManagerAPI.Models.Worker", "Worker")
                        .WithMany("Appointments")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Status");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("DentalManagerAPI.Models.AppointmentPayment", b =>
                {
                    b.HasOne("DentalManagerAPI.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("DentalManagerAPI.Models.AppointmentService", b =>
                {
                    b.HasOne("DentalManagerAPI.Models.Appointment", null)
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalManagerAPI.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DentalManagerAPI.Models.Office", b =>
                {
                    b.HasOne("DentalManagerAPI.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DentalManagerAPI.Models.SalaryPayment", b =>
                {
                    b.HasOne("DentalManagerAPI.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("DentalManagerAPI.Models.Schedule", b =>
                {
                    b.HasOne("DentalManagerAPI.Models.Day", "Day")
                        .WithMany()
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalManagerAPI.Models.TimeSegment", "TimeSegment")
                        .WithMany()
                        .HasForeignKey("TimeSegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("TimeSegment");
                });

            modelBuilder.Entity("DentalManagerAPI.Models.Service", b =>
                {
                    b.HasOne("DentalManagerAPI.Models.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("DentalManagerAPI.Models.Worker", b =>
                {
                    b.HasOne("DentalManagerAPI.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.HasOne("DentalManagerAPI.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.Navigation("Office");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("DentalManagerAPI.Models.WorkerSchedule", b =>
                {
                    b.HasOne("DentalManagerAPI.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalManagerAPI.Models.Worker", "Worker")
                        .WithMany("WorkerSchedules")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("DentalManagerAPI.Models.Appointment", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("DentalManagerAPI.Models.Worker", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("WorkerSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
